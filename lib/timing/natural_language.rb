# Autogenerated from a Treetop grammar. Edits may be lost.


module Timing
  module NaturalLanguage
    include Treetop::Runtime

    def root
      @root ||= :expression
    end

    module Expression0
      def moment
        elements[1]
      end

      def zone_offset
        elements[3]
      end

    end

    def _nt_expression
      start_index = index
      if node_cache[:expression].has_key?(index)
        cached = node_cache[:expression][index]
        if cached
          node_cache[:expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      s1, i1 = [], index
      loop do
        r2 = _nt_space
        if r2
          s1 << r2
        else
          break
        end
      end
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      s0 << r1
      if r1
        r3 = _nt_moment
        s0 << r3
        if r3
          s4, i4 = [], index
          loop do
            r5 = _nt_space
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s0 << r4
          if r4
            r7 = _nt_zone_offset
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r6
            if r6
              s8, i8 = [], index
              loop do
                r9 = _nt_space
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(Expression,input, i0...index, s0)
        r0.extend(Expression0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:expression][start_index] = r0

      r0
    end

    def _nt_moment
      start_index = index
      if node_cache[:moment].has_key?(index)
        cached = node_cache[:moment][index]
        if cached
          node_cache[:moment][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_named_moment
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        r2 = _nt_direction_to_day_name
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
        else
          r3 = _nt_day_month_name_year
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r0 = r3
          else
            r4 = _nt_year_month_day
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r0 = r4
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end

      node_cache[:moment][start_index] = r0

      r0
    end

    def _nt_named_moment
      start_index = index
      if node_cache[:named_moment].has_key?(index)
        cached = node_cache[:named_moment][index]
        if cached
          node_cache[:named_moment][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_now
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        r2 = _nt_today
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
        else
          r3 = _nt_tomorrow
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r0 = r3
          else
            r4 = _nt_yesterday
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r0 = r4
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end

      node_cache[:named_moment][start_index] = r0

      r0
    end

    module DirectionToDayName0
      def direction
        elements[0]
      end

      def day_name
        elements[2]
      end
    end

    def _nt_direction_to_day_name
      start_index = index
      if node_cache[:direction_to_day_name].has_key?(index)
        cached = node_cache[:direction_to_day_name][index]
        if cached
          node_cache[:direction_to_day_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_direction
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          r3 = _nt_space
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          r4 = _nt_day_name
          s0 << r4
        end
      end
      if s0.last
        r0 = instantiate_node(DirectionToDayName,input, i0...index, s0)
        r0.extend(DirectionToDayName0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:direction_to_day_name][start_index] = r0

      r0
    end

    module DayMonthNameYear0
      def day
        elements[0]
      end

      def month
        elements[2]
      end

      def year
        elements[4]
      end

    end

    def _nt_day_month_name_year
      start_index = index
      if node_cache[:day_month_name_year].has_key?(index)
        cached = node_cache[:day_month_name_year][index]
        if cached
          node_cache[:day_month_name_year][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_integer
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          r3 = _nt_space
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          r4 = _nt_month_name
          s0 << r4
          if r4
            s5, i5 = [], index
            loop do
              r6 = _nt_space
              if r6
                s5 << r6
              else
                break
              end
            end
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            s0 << r5
            if r5
              r8 = _nt_integer
              if r8
                r7 = r8
              else
                r7 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r7
              if r7
                s9, i9 = [], index
                loop do
                  r10 = _nt_space
                  if r10
                    s9 << r10
                  else
                    break
                  end
                end
                r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                s0 << r9
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(DayMonthNameYear,input, i0...index, s0)
        r0.extend(DayMonthNameYear0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:day_month_name_year][start_index] = r0

      r0
    end

    module YearMonthDay0
      def year
        elements[0]
      end

      def month
        elements[2]
      end

      def day
        elements[4]
      end
    end

    def _nt_year_month_day
      start_index = index
      if node_cache[:year_month_day].has_key?(index)
        cached = node_cache[:year_month_day][index]
        if cached
          node_cache[:year_month_day][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_integer
      s0 << r1
      if r1
        if (match_len = has_terminal?('-', false, index))
          r2 = true
          @index += match_len
        else
          terminal_parse_failure('\'-\'')
          r2 = nil
        end
        s0 << r2
        if r2
          r3 = _nt_integer
          s0 << r3
          if r3
            if (match_len = has_terminal?('-', false, index))
              r4 = true
              @index += match_len
            else
              terminal_parse_failure('\'-\'')
              r4 = nil
            end
            s0 << r4
            if r4
              r5 = _nt_integer
              s0 << r5
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(YearMonthDay,input, i0...index, s0)
        r0.extend(YearMonthDay0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:year_month_day][start_index] = r0

      r0
    end

    def _nt_now
      start_index = index
      if node_cache[:now].has_key?(index)
        cached = node_cache[:now][index]
        if cached
          node_cache[:now][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('now', :insens, index))
        r0 = instantiate_node(Now,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'now\'')
        r0 = nil
      end

      node_cache[:now][start_index] = r0

      r0
    end

    def _nt_today
      start_index = index
      if node_cache[:today].has_key?(index)
        cached = node_cache[:today][index]
        if cached
          node_cache[:today][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('today', :insens, index))
        r0 = instantiate_node(Today,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'today\'')
        r0 = nil
      end

      node_cache[:today][start_index] = r0

      r0
    end

    def _nt_tomorrow
      start_index = index
      if node_cache[:tomorrow].has_key?(index)
        cached = node_cache[:tomorrow][index]
        if cached
          node_cache[:tomorrow][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('tomorrow', :insens, index))
        r0 = instantiate_node(Tomorrow,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'tomorrow\'')
        r0 = nil
      end

      node_cache[:tomorrow][start_index] = r0

      r0
    end

    def _nt_yesterday
      start_index = index
      if node_cache[:yesterday].has_key?(index)
        cached = node_cache[:yesterday][index]
        if cached
          node_cache[:yesterday][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('yesterday', :insens, index))
        r0 = instantiate_node(Yesterday,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'yesterday\'')
        r0 = nil
      end

      node_cache[:yesterday][start_index] = r0

      r0
    end

    def _nt_direction
      start_index = index
      if node_cache[:direction].has_key?(index)
        cached = node_cache[:direction][index]
        if cached
          node_cache[:direction][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_next
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        r2 = _nt_last
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:direction][start_index] = r0

      r0
    end

    def _nt_next
      start_index = index
      if node_cache[:next].has_key?(index)
        cached = node_cache[:next][index]
        if cached
          node_cache[:next][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('next', :insens, index))
        r0 = instantiate_node(Direction,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'next\'')
        r0 = nil
      end

      node_cache[:next][start_index] = r0

      r0
    end

    def _nt_last
      start_index = index
      if node_cache[:last].has_key?(index)
        cached = node_cache[:last][index]
        if cached
          node_cache[:last][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if (match_len = has_terminal?('last', :insens, index))
        r0 = instantiate_node(Direction,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'last\'')
        r0 = nil
      end

      node_cache[:last][start_index] = r0

      r0
    end

    def _nt_day_name
      start_index = index
      if node_cache[:day_name].has_key?(index)
        cached = node_cache[:day_name][index]
        if cached
          node_cache[:day_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_long_day_name
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        r2 = _nt_short_day_name
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:day_name][start_index] = r0

      r0
    end

    def _nt_long_day_name
      start_index = index
      if node_cache[:long_day_name].has_key?(index)
        cached = node_cache[:long_day_name][index]
        if cached
          node_cache[:long_day_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      if (match_len = has_terminal?('sunday', :insens, index))
        r1 = instantiate_node(DayName,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'sunday\'')
        r1 = nil
      end
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        if (match_len = has_terminal?('monday', :insens, index))
          r2 = instantiate_node(DayName,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'monday\'')
          r2 = nil
        end
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
        else
          if (match_len = has_terminal?('tuesday', :insens, index))
            r3 = instantiate_node(DayName,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'tuesday\'')
            r3 = nil
          end
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r0 = r3
          else
            if (match_len = has_terminal?('wednesday', :insens, index))
              r4 = instantiate_node(DayName,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'wednesday\'')
              r4 = nil
            end
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r0 = r4
            else
              if (match_len = has_terminal?('thursday', :insens, index))
                r5 = instantiate_node(DayName,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\'thursday\'')
                r5 = nil
              end
              if r5
                r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                r0 = r5
              else
                if (match_len = has_terminal?('friday', :insens, index))
                  r6 = instantiate_node(DayName,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'friday\'')
                  r6 = nil
                end
                if r6
                  r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                  r0 = r6
                else
                  if (match_len = has_terminal?('saturday', :insens, index))
                    r7 = instantiate_node(DayName,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('\'saturday\'')
                    r7 = nil
                  end
                  if r7
                    r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                    r0 = r7
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end

      node_cache[:long_day_name][start_index] = r0

      r0
    end

    def _nt_short_day_name
      start_index = index
      if node_cache[:short_day_name].has_key?(index)
        cached = node_cache[:short_day_name][index]
        if cached
          node_cache[:short_day_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      if (match_len = has_terminal?('sun', :insens, index))
        r1 = instantiate_node(DayName,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'sun\'')
        r1 = nil
      end
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        if (match_len = has_terminal?('mon', :insens, index))
          r2 = instantiate_node(DayName,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'mon\'')
          r2 = nil
        end
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
        else
          if (match_len = has_terminal?('tue', :insens, index))
            r3 = instantiate_node(DayName,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'tue\'')
            r3 = nil
          end
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r0 = r3
          else
            if (match_len = has_terminal?('wed', :insens, index))
              r4 = instantiate_node(DayName,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'wed\'')
              r4 = nil
            end
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r0 = r4
            else
              if (match_len = has_terminal?('thu', :insens, index))
                r5 = instantiate_node(DayName,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\'thu\'')
                r5 = nil
              end
              if r5
                r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                r0 = r5
              else
                if (match_len = has_terminal?('fri', :insens, index))
                  r6 = instantiate_node(DayName,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'fri\'')
                  r6 = nil
                end
                if r6
                  r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                  r0 = r6
                else
                  if (match_len = has_terminal?('sat', :insens, index))
                    r7 = instantiate_node(DayName,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('\'sat\'')
                    r7 = nil
                  end
                  if r7
                    r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                    r0 = r7
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end

      node_cache[:short_day_name][start_index] = r0

      r0
    end

    def _nt_month_name
      start_index = index
      if node_cache[:month_name].has_key?(index)
        cached = node_cache[:month_name][index]
        if cached
          node_cache[:month_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_long_month_name
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        r2 = _nt_short_month_name
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:month_name][start_index] = r0

      r0
    end

    def _nt_long_month_name
      start_index = index
      if node_cache[:long_month_name].has_key?(index)
        cached = node_cache[:long_month_name][index]
        if cached
          node_cache[:long_month_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      if (match_len = has_terminal?('january', :insens, index))
        r1 = instantiate_node(MonthName,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'january\'')
        r1 = nil
      end
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        if (match_len = has_terminal?('february', :insens, index))
          r2 = instantiate_node(MonthName,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'february\'')
          r2 = nil
        end
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
        else
          if (match_len = has_terminal?('march', :insens, index))
            r3 = instantiate_node(MonthName,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'march\'')
            r3 = nil
          end
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r0 = r3
          else
            if (match_len = has_terminal?('april', :insens, index))
              r4 = instantiate_node(MonthName,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'april\'')
              r4 = nil
            end
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r0 = r4
            else
              if (match_len = has_terminal?('may', :insens, index))
                r5 = instantiate_node(MonthName,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\'may\'')
                r5 = nil
              end
              if r5
                r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                r0 = r5
              else
                if (match_len = has_terminal?('june', :insens, index))
                  r6 = instantiate_node(MonthName,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'june\'')
                  r6 = nil
                end
                if r6
                  r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                  r0 = r6
                else
                  if (match_len = has_terminal?('july', :insens, index))
                    r7 = instantiate_node(MonthName,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('\'july\'')
                    r7 = nil
                  end
                  if r7
                    r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                    r0 = r7
                  else
                    if (match_len = has_terminal?('august', :insens, index))
                      r8 = instantiate_node(MonthName,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'august\'')
                      r8 = nil
                    end
                    if r8
                      r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                      r0 = r8
                    else
                      if (match_len = has_terminal?('september', :insens, index))
                        r9 = instantiate_node(MonthName,input, index...(index + match_len))
                        @index += match_len
                      else
                        terminal_parse_failure('\'september\'')
                        r9 = nil
                      end
                      if r9
                        r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                        r0 = r9
                      else
                        if (match_len = has_terminal?('october', :insens, index))
                          r10 = instantiate_node(MonthName,input, index...(index + match_len))
                          @index += match_len
                        else
                          terminal_parse_failure('\'october\'')
                          r10 = nil
                        end
                        if r10
                          r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                          r0 = r10
                        else
                          if (match_len = has_terminal?('november', :insens, index))
                            r11 = instantiate_node(MonthName,input, index...(index + match_len))
                            @index += match_len
                          else
                            terminal_parse_failure('\'november\'')
                            r11 = nil
                          end
                          if r11
                            r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                            r0 = r11
                          else
                            if (match_len = has_terminal?('december', :insens, index))
                              r12 = instantiate_node(MonthName,input, index...(index + match_len))
                              @index += match_len
                            else
                              terminal_parse_failure('\'december\'')
                              r12 = nil
                            end
                            if r12
                              r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
                              r0 = r12
                            else
                              @index = i0
                              r0 = nil
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end

      node_cache[:long_month_name][start_index] = r0

      r0
    end

    def _nt_short_month_name
      start_index = index
      if node_cache[:short_month_name].has_key?(index)
        cached = node_cache[:short_month_name][index]
        if cached
          node_cache[:short_month_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      if (match_len = has_terminal?('jan', :insens, index))
        r1 = instantiate_node(MonthName,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'jan\'')
        r1 = nil
      end
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        if (match_len = has_terminal?('feb', :insens, index))
          r2 = instantiate_node(MonthName,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'feb\'')
          r2 = nil
        end
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
        else
          if (match_len = has_terminal?('mar', :insens, index))
            r3 = instantiate_node(MonthName,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'mar\'')
            r3 = nil
          end
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r0 = r3
          else
            if (match_len = has_terminal?('apr', :insens, index))
              r4 = instantiate_node(MonthName,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'apr\'')
              r4 = nil
            end
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r0 = r4
            else
              if (match_len = has_terminal?('may', :insens, index))
                r5 = instantiate_node(MonthName,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\'may\'')
                r5 = nil
              end
              if r5
                r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                r0 = r5
              else
                if (match_len = has_terminal?('jun', :insens, index))
                  r6 = instantiate_node(MonthName,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'jun\'')
                  r6 = nil
                end
                if r6
                  r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                  r0 = r6
                else
                  if (match_len = has_terminal?('jul', :insens, index))
                    r7 = instantiate_node(MonthName,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('\'jul\'')
                    r7 = nil
                  end
                  if r7
                    r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                    r0 = r7
                  else
                    if (match_len = has_terminal?('aug', :insens, index))
                      r8 = instantiate_node(MonthName,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'aug\'')
                      r8 = nil
                    end
                    if r8
                      r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                      r0 = r8
                    else
                      if (match_len = has_terminal?('sep', :insens, index))
                        r9 = instantiate_node(MonthName,input, index...(index + match_len))
                        @index += match_len
                      else
                        terminal_parse_failure('\'sep\'')
                        r9 = nil
                      end
                      if r9
                        r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                        r0 = r9
                      else
                        if (match_len = has_terminal?('oct', :insens, index))
                          r10 = instantiate_node(MonthName,input, index...(index + match_len))
                          @index += match_len
                        else
                          terminal_parse_failure('\'oct\'')
                          r10 = nil
                        end
                        if r10
                          r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                          r0 = r10
                        else
                          if (match_len = has_terminal?('nov', :insens, index))
                            r11 = instantiate_node(MonthName,input, index...(index + match_len))
                            @index += match_len
                          else
                            terminal_parse_failure('\'nov\'')
                            r11 = nil
                          end
                          if r11
                            r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                            r0 = r11
                          else
                            if (match_len = has_terminal?('dec', :insens, index))
                              r12 = instantiate_node(MonthName,input, index...(index + match_len))
                              @index += match_len
                            else
                              terminal_parse_failure('\'dec\'')
                              r12 = nil
                            end
                            if r12
                              r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
                              r0 = r12
                            else
                              @index = i0
                              r0 = nil
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end

      node_cache[:short_month_name][start_index] = r0

      r0
    end

    module ZoneOffset0
    end

    def _nt_zone_offset
      start_index = index
      if node_cache[:zone_offset].has_key?(index)
        cached = node_cache[:zone_offset][index]
        if cached
          node_cache[:zone_offset][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?(@regexps[gr = '\A[+-]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[+-]')
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[\\d]'] ||= Regexp.new(gr), :regexp, index)
            r3 = true
            @index += 1
          else
            terminal_parse_failure('[\\d]')
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
          if s2.size == 2
            break
          end
        end
        if s2.size < 2
          @index = i2
          r2 = nil
        else
          if s2.size < 2
            terminal_failures.pop
          end
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        end
        s0 << r2
        if r2
          if (match_len = has_terminal?(':', false, index))
            r5 = true
            @index += match_len
          else
            terminal_parse_failure('\':\'')
            r5 = nil
          end
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
          if r4
            s6, i6 = [], index
            loop do
              if has_terminal?(@regexps[gr = '\A[\\d]'] ||= Regexp.new(gr), :regexp, index)
                r7 = true
                @index += 1
              else
                terminal_parse_failure('[\\d]')
                r7 = nil
              end
              if r7
                s6 << r7
              else
                break
              end
              if s6.size == 2
                break
              end
            end
            if s6.size < 2
              @index = i6
              r6 = nil
            else
              if s6.size < 2
                terminal_failures.pop
              end
              r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            end
            s0 << r6
          end
        end
      end
      if s0.last
        r0 = instantiate_node(ZoneOffset,input, i0...index, s0)
        r0.extend(ZoneOffset0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:zone_offset][start_index] = r0

      r0
    end

    def _nt_integer
      start_index = index
      if node_cache[:integer].has_key?(index)
        cached = node_cache[:integer][index]
        if cached
          node_cache[:integer][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[\\d]'] ||= Regexp.new(gr), :regexp, index)
          r1 = true
          @index += 1
        else
          terminal_parse_failure('[\\d]')
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(Int,input, i0...index, s0)
      end

      node_cache[:integer][start_index] = r0

      r0
    end

    def _nt_space
      start_index = index
      if node_cache[:space].has_key?(index)
        cached = node_cache[:space][index]
        if cached
          node_cache[:space][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?(@regexps[gr = '\A[\\s\\t\\n]'] ||= Regexp.new(gr), :regexp, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('[\\s\\t\\n]')
        r0 = nil
      end

      node_cache[:space][start_index] = r0

      r0
    end

  end

  class NaturalLanguageParser < Treetop::Runtime::CompiledParser
    include NaturalLanguage
  end

end